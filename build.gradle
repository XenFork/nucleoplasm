import com.google.gson.Gson

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.code.gson:gson:2.10.1'
    }
}

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.2-SNAPSHOT" apply false
    id "com.github.johnrengelman.shadow" version "7.1.2" apply false
//    id("fabric-loom").version("1.2-SNAPSHOT").apply(false)
}

setVersion(nucleoplasm_version)

ext {
    def pre_url = "https://xenfork.github.io/all-project-version-selector/$base_name/"
    def strings = "$base_name,fabric,include".split(",")
    Gson gson = new Gson()

    for (final def s in strings ) {
        def url = new URL("$pre_url$s-version.json")
        def reader = url.newReader()
        Map json = gson.fromJson(reader, Map.class)
        json.forEach {
            k,v ->
                set("$k", v)
        }
        reader.close()
    }
}

architectury {
    minecraft = minecraft_version
}

subprojects {
        for (final def p in no_fabric_projects.split(",")) {
        if (!project.name.contains(p)) {
            apply plugin: "dev.architectury.loom"

            loom {
                silentMojangMappingsLicense()
            }

            dependencies {
                minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
                mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    repositories {
        mavenLocal()
        mavenCentral()

        maven { url 'https://chinawaremc.github.io/maven-repo/' }
        maven { url 'https://raw.githubusercontent.com/baka4n/mvn-repo/master/' }
        maven { url = "https://cursemaven.com" }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://s01.oss.sonatype.org/content/repositories/releases' }
        maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
        maven { url "https://maven.fabricmc.net/" }
        maven { url "https://maven.architectury.dev/" }
        maven { url "https://maven.minecraftforge.net/" }
        maven { url 'https://www.jitpack.io' }
        gradlePluginPortal()
    }

    setGroup(maven_group)


    jar {
        archiveClassifier.set("dev")
        from("../../LICENSE") {
            rename { "${it}_$archivesBaseName" }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release.set(17)
    }

    java {
        withSourcesJar()
    }
}

for (final def p in nucleoplasm_projects.split(",")) {
    project("$base_name-$p-common") {
        dependencies {
            modImplementation "net.fabricmc:fabric-loader:$loader_version"
        }

        architectury {
            common()
        }

        setVersion("${findProperty("${"$base_name-$p".replace('-', '_')}_version")}-${minecraft_version}")

        publishing {
            publications {
                mavenFabric(MavenPublication) {
                    artifactId = archivesBaseName
                    from components.java
                }
            }
            // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
            repositories {
                maven { url "${file("../../../../maven-repo")}" }
                mavenLocal()
            }
        }

    }
    project("$base_name-$p-fabric") {
        apply plugin: "com.github.johnrengelman.shadow"

        architectury {
            platformSetupLoomIde()
            fabric()
        }

        configurations {
            common
            shadowCommon
            compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            developmentFabric.extendsFrom common
        }

        setVersion("${findProperty("${"$base_name-$p".replace('-', '_')}_version")}-${minecraft_version}")

        dependencies {
            modImplementation "net.fabricmc:fabric-loader:$loader_version"
            modApi "net.fabricmc.fabric-api:fabric-api:$fabric_version"

            common(project(path: ":$base_name-$p-common", configuration: "namedElements")) { transitive false }
            shadowCommon(project(path: ":$base_name-$p-common", configuration: "transformProductionFabric")) { transitive false }


        }

        processResources {
            inputs.property "version", project.version
            final string = archivesBaseName
            inputs.property "modid", string.substring(0, string.lastIndexOf("-")).replace("-", "_")
            inputs.property "name", string.substring(0, string.lastIndexOf("-")).replace("-", " ")
            inputs.property "authors", authors
            inputs.property "license", license
            inputs.property "loader_version", loader_version
            inputs.property "minecraft_version", minecraft_version
            filteringCharset charset
            filesMatching("fabric.mod.json") {
                expand "version": project.version,
                        "modid": string.substring(0, string.lastIndexOf("-")).replace("-", "_"),
                        "name": string.substring(0, string.lastIndexOf("-")).replace("-", " "),
                        "authors": authors,
                        "license": license,
                        "loader_version": loader_version,
                        "minecraft_version" : minecraft_version
            }

        }

        shadowJar {
            configurations = [project.configurations.shadowCommon]
            archiveClassifier.set("all")
        }

        remapJar {
            inputFile.set shadowJar.archiveFile
            dependsOn shadowJar
            archiveClassifier.set(null)
        }

        sourcesJar {
            def commonSources = project(":$base_name-$p-common").sourcesJar
            dependsOn commonSources
            from commonSources.archiveFile.map { zipTree(it) }
        }

        components.java {
            withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
                skip()
            }
        }

        publishing {
            publications {
                mavenFabric(MavenPublication) {
                    artifactId = archivesBaseName
                    from components.java
                }
            }

            // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
            repositories {
                maven { url "${file("../../../../maven-repo")}" }
                mavenLocal()
            }
        }

    }
    project("$base_name-$p-forge") {
        apply plugin: "com.github.johnrengelman.shadow"

        architectury {
            platformSetupLoomIde()
            forge()
        }

        configurations {
            common
            shadowCommon
            compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            developmentFabric.extendsFrom common
        }

        setVersion("${findProperty("${"$base_name-$p".replace('-', '_')}_version")}-${minecraft_version}")

        dependencies {
            forge "net.minecraftforge:forge:$forge_version"

            common(project(path: ":$base_name-$p-common", configuration: "namedElements")) { transitive false }
            shadowCommon(project(path: ":$base_name-$p-common", configuration: "transformProductionFabric")) { transitive false }
        }

        processResources {
            inputs.property "version", project.version

            final string = archivesBaseName
            inputs.property "modid", string.substring(0, string.lastIndexOf("-")).replace("-", "_")

            inputs.property "name", string.substring(0, string.lastIndexOf("-")).replace("-", " ")
            inputs.property "authors", authors.replace("\",\"", ",")
            filteringCharset charset
            filesMatching("META-INF/mods.toml") {
                expand "version": project.version,
                       "modid": string.substring(0, string.lastIndexOf("-")).replace("-", "_"),
                        "name": string.substring(0, string.lastIndexOf("-")).replace("-", " "),
                        "authors": authors.replace("\",\"", ",")
            }
            filesMatching("pack.mcmeta") {
                expand "name": string.substring(0, string.lastIndexOf("-")).replace("-", " ")
            }
        }

        shadowJar {
            exclude "fabric.mod.json"

            configurations = [project.configurations.shadowCommon]
            archiveClassifier.set("all")
        }

        remapJar {
            inputFile.set shadowJar.archiveFile
            dependsOn shadowJar
            archiveClassifier.set(null)
        }

        sourcesJar {
            def commonSources = project(":$base_name-$p-common").sourcesJar
            dependsOn commonSources
            from commonSources.archiveFile.map { zipTree(it) }
        }

        components.java {
            withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
                skip()
            }
        }

        publishing {
            publications {
                mavenForge(MavenPublication) {
                    artifactId = archivesBaseName
                    from components.java
                }
            }

            repositories {
                maven { url "${file("../../../../maven-repo")}" }
                mavenLocal()
            }
        }

    }
}
